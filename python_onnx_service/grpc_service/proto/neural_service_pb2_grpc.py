# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import neural_service_pb2 as proto_dot_neural__service__pb2


class NeuralServiceStub(object):
    """NeuralService provides neural network inference capabilities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/neural.NeuralService/Predict',
                request_serializer=proto_dot_neural__service__pb2.PredictRequest.SerializeToString,
                response_deserializer=proto_dot_neural__service__pb2.PredictResponse.FromString,
                )
        self.BatchPredict = channel.unary_unary(
                '/neural.NeuralService/BatchPredict',
                request_serializer=proto_dot_neural__service__pb2.BatchPredictRequest.SerializeToString,
                response_deserializer=proto_dot_neural__service__pb2.BatchPredictResponse.FromString,
                )
        self.GetModelInfo = channel.unary_unary(
                '/neural.NeuralService/GetModelInfo',
                request_serializer=proto_dot_neural__service__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=proto_dot_neural__service__pb2.ModelInfoResponse.FromString,
                )


class NeuralServiceServicer(object):
    """NeuralService provides neural network inference capabilities
    """

    def Predict(self, request, context):
        """Predict runs model inference on a single input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPredict(self, request, context):
        """BatchPredict runs model inference on multiple inputs simultaneously
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """GetModelInfo returns information about the loaded model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NeuralServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=proto_dot_neural__service__pb2.PredictRequest.FromString,
                    response_serializer=proto_dot_neural__service__pb2.PredictResponse.SerializeToString,
            ),
            'BatchPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPredict,
                    request_deserializer=proto_dot_neural__service__pb2.BatchPredictRequest.FromString,
                    response_serializer=proto_dot_neural__service__pb2.BatchPredictResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=proto_dot_neural__service__pb2.ModelInfoRequest.FromString,
                    response_serializer=proto_dot_neural__service__pb2.ModelInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'neural.NeuralService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NeuralService(object):
    """NeuralService provides neural network inference capabilities
    """

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neural.NeuralService/Predict',
            proto_dot_neural__service__pb2.PredictRequest.SerializeToString,
            proto_dot_neural__service__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neural.NeuralService/BatchPredict',
            proto_dot_neural__service__pb2.BatchPredictRequest.SerializeToString,
            proto_dot_neural__service__pb2.BatchPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neural.NeuralService/GetModelInfo',
            proto_dot_neural__service__pb2.ModelInfoRequest.SerializeToString,
            proto_dot_neural__service__pb2.ModelInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
